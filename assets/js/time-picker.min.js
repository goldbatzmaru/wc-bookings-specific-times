jQuery(document).ready(function($) {

	$('.block-picker').on( 'click', 'a', function() {
		var value        = $(this).data( 'value' );
		var block_picker = $(this).closest( 'ul' );

		set_selected_time( block_picker, value );
		return false;
	});

	function set_selected_time( block_picker, value ) {
		var submit_button = block_picker.closest( 'form' ).find( '.wc-bookings-booking-form-button' );
		if ( undefined === value ) {
			submit_button.addClass( 'disabled' );
			return;
		}

		var selected_block = block_picker.find( '[data-value="' + value + '"]' );

		if ( undefined === selected_block.data( 'value' ) ) {
			submit_button.addClass( 'disabled' );
			return;
		}

		var target = block_picker.closest( 'div' ).find( 'input' );

		target.val( value ).change();
		block_picker.closest( 'ul' ).find( 'a' ).removeClass( 'selected' );
		selected_block.addClass( 'selected' );
		submit_button.removeClass( 'disabled' );
	}

	function contains(needle) {
	    // Per spec, the way to identify NaN is that it is not equal to itself
	    var findNaN = needle !== needle;
	    var indexOf;

	    if(!findNaN && typeof Array.prototype.indexOf === 'function') {
	        indexOf = Array.prototype.indexOf;
	    } else {
	        indexOf = function(needle) {
	            var i = -1, index = -1;

	            for(i = 0; i < this.length; i++) {
	                var item = this[i];

	                if((findNaN && item !== item) || item === needle) {
	                    index = i;
	                    break;
	                }
	            }

	            return index;
	        };
	    }

	    return indexOf.call(this, needle) > -1;
	}

	$('#wc_bookings_field_resource, #wc_bookings_field_duration').change( function() {
		show_available_time_blocks( this );
	});
	$('.wc-bookings-booking-form fieldset').on( 'date-selected', function() {
		show_available_time_blocks( this );
	});

	var xhr;
	var specific_times_data;

	function show_available_time_blocks( element ) {
		var $form               = $(element).closest( 'form' );
		var fieldset            = $(element).closest( 'div' ).find( 'fieldset' )
		var block_picker        = $(element).closest( 'div' ).find( '.block-picker' );
		var selected_block      = block_picker.find( '.selected' );

		var year  = parseInt( fieldset.find( 'input.booking_date_year' ).val(), 10 );
		var month = parseInt( fieldset.find( 'input.booking_date_month' ).val(), 10 );
		var day   = parseInt( fieldset.find( 'input.booking_date_day' ).val(), 10 );

		if ( ! year || ! month || ! day ) {
			return;
		}

		// clear blocks
		block_picker.closest( 'div' ).find( 'input' ).val( '' ).change();
		block_picker.closest( 'div' ).block( {message: null, overlayCSS: { background: '#fff', backgroundSize: '16px 16px', opacity: 0.6 }} ).show();

		var productId = $('.wc-booking-product-id').val();

		// Get blocks via ajax
		if ( xhr ) xhr.abort();

	    $.ajax( {
	        type: 			'POST',
				url: 		booking_form_params.ajax_url,
				data: 		{
					action: 'wc_bookings_get_specific_times_info',
					product_id: productId
	        }
	    } )
	        .done( function( data ) {
	            // Handles successful responses only
	            specific_times_data = data;
	        } )
	        .fail( function( reason ) {
	            console.info( reason );
	        } )
	        // Promise finished:
	        .then( function( specific_times_data ) {
	            $.ajax({
					type: 		'POST',
					url: 		booking_form_params.ajax_url,
					data: 		{
						action: 'wc_bookings_get_blocks',
						form:   $form.serialize()
					},
					success: function( code ) {
						specific_times_data = jQuery.parseJSON(specific_times_data);
						var allowed_times = specific_times_data[0];
						var	allowed_times_cleaned = [];
						$.each(allowed_times, function(index, value){
							allowed_times_cleaned.push(String(value));
						});
						var parsedHTML = $.parseHTML(code);
						var allowedBlocks = [];
						$.each(parsedHTML, function(i, v){
							var time_value = $(this).attr('data-block');
							
							var is_allowed_time = contains.call(allowed_times_cleaned, time_value);
							if(is_allowed_time != false){
								allowedBlocks.push($(this));
							}
						});
						block_picker.html( allowedBlocks );
						resize_blocks();
						block_picker.closest( 'div' ).unblock();
						set_selected_time( block_picker, selected_block.data( 'value' ) );
					},
					error: function(code) {
						console.log('ERROR');
						console.log(code);
					},
					dataType: 	"html"
				});
	        } );
	}

	function resize_blocks() {
		var max_width  = 0;
		var max_height = 0;

		$('.block-picker a').each( function() {
			var width  = $(this).width();
			var height = $(this).height();
			if ( width > max_width ) {
				max_width = width;
			}
			if ( height > max_height ) {
				max_height = height;
			}
		});

		$('.block-picker a').width( max_width );
		$('.block-picker a').height( max_height );
	}
});
